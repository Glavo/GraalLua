/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.glavo.lua.launcher;

import org.graalvm.launcher.AbstractLanguageLauncher;
import org.graalvm.options.OptionCategory;
import org.graalvm.polyglot.Context;
import org.graalvm.polyglot.EnvironmentAccess;
import org.graalvm.polyglot.Source;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.List;
import java.util.Map;

public final class LuaLauncher extends AbstractLanguageLauncher {
    static final String ID = "lua";
    private CmdLineParser.CmdResult cmdResult = null;

    @Override
    protected List<String> preprocessArguments(List<String> arguments, Map<String, String> polyglotOptions) {
        var result = CmdLineParser.parse(arguments);
        this.cmdResult = result.getLeft();
        return result.getRight();
    }

    @Override
    protected void launch(Context.Builder contextBuilder) {
        assert cmdResult != null;
        try (var context = contextBuilder
                .arguments(ID, cmdResult.innerArguments)
                .allowEnvironmentAccess(cmdResult.ignoreEnv ? EnvironmentAccess.NONE : EnvironmentAccess.INHERIT)
                .build()) {
            for (var i : cmdResult.libraries) {
                context.eval(ID, "require " + i + "; ");
            }
            for (var i : cmdResult.statements) {
                context.eval(ID, i);
            }
            if (cmdResult.fromStdin) {
                context.eval(Source.newBuilder(ID, new InputStreamReader(System.in), "<stdin>").build());
            } else if (cmdResult.scriptPath != null) {
                context.eval(Source.newBuilder(ID, cmdResult.scriptPath.toFile()).build());
            }
            if (cmdResult.enterInterative) {
                /// TODO: handle interactive
                System.err.println("[WARN] REPL is not ready yet");
                context.eval(Source.newBuilder(ID, new InputStreamReader(System.in), "<stdin>")
                        .interactive(true)
                        .build());
            }
        } catch (IOException e) {
            System.err.println(e.getLocalizedMessage());
            this.exit(1);
        }
        /// TODO: do we need to check some polyglot exceptions here?
    }

    public static void main(String[] args) {
        new LuaLauncher().launch(args);
    }


    @Override
    protected String getLanguageId() {
        return ID;
    }

    @Override
    protected void printHelp(OptionCategory maxCategory) {
        println("usage: <this-program> [options]... [script [args]...].\n" +
                "Available options are:");
        launcherOption("-e stat", "Execute string 'stat'.");
        launcherOption("-i", "Enter interactive mode after executing 'script'.");
        launcherOption("-l name", "Require library 'name'.");
        launcherOption("--", "Stop handling options.");
        launcherOption("-", "Stop handling options and execute stdin.");
    }

}
